import pickle
import sqlalchemy
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix
from pathlib import Path
from preprocessing import preprocess

# Connexion Ã  la base de donnÃ©es MySQL via SQLAlchemy
db_url = "mysql+pymysql://user:userpassword@localhost/tweets_db"
engine = sqlalchemy.create_engine(db_url)

query = "SELECT text, positive FROM tweets"
df = pd.read_sql(query, engine)

# ðŸ”¹ VÃ©rification des classes dans y
if df["positive"].nunique() < 2:
    raise ValueError(
        "Erreur : La base de donnÃ©es doit contenir au moins deux classes (positif et nÃ©gatif)."
    )

X = preprocess(df["text"])
y = df["positive"]  # On prend la colonne "positive" comme label

# ðŸ”¹ SÃ©paration des donnÃ©es en train/test
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.25, random_state=42
)

# ðŸ”¹ VÃ©rification des classes aprÃ¨s sÃ©paration
if len(set(y_train)) < 2:
    raise ValueError(
        "Erreur : y_train doit contenir au moins 2 classes distinctes (positif/nÃ©gatif)."
    )

# ðŸ”¹ EntraÃ®nement du modÃ¨le de rÃ©gression logistique
model = LogisticRegression()
model.fit(X_train, y_train)

# ðŸ”¹ PrÃ©dictions et Ã©valuation du modÃ¨le
y_pred = model.predict(X_test)
print("Rapport de classification :")
print(classification_report(y_test, y_pred))

print("Matrice de confusion :")
print(confusion_matrix(y_test, y_pred))

# ðŸ”¹ Tester avec de nouveaux commentaires
new_comments = [
    "Je ne supporte pas cette personne.",  # NÃ©gatif
    "Cette vidÃ©o est incroyable, merci pour votre travail.",  # Positif
    "ArrÃªte de dire n'importe quoi, imbÃ©cile.",  # NÃ©gatif
    "Une excellente prÃ©sentation, bravo Ã  toute l'Ã©quipe.",  # Positif
    "Ta gueule!!!",  # NÃ©gatif
    "ImbÃ©cile",  # NÃ©gatif
]

# ðŸ”¹ Nettoyage et vectorisation
new_comments_vectorized = preprocess(new_comments)

# ðŸ”¹ PrÃ©dictions sur les nouveaux commentaires
predictions = model.predict(new_comments_vectorized)
for comment, label in zip(new_comments, predictions):
    print(f"Commentaire : '{comment}' -> {'Positive' if label == 1 else 'Else'}")

# ðŸ”¹ Sauvegarde
pickle.dump(model, open(Path(__file__).parent / "models/positive.pkl", "wb"))
